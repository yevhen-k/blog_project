$ dhango-admin startproject blog_project
$ dhango-admin startapp blog

$ python manage.py runserver

$ python manage.py makemigrations
$ python manage.py migrate
$ python manage.py createsuperuser

View SQL command to be run to create table in db
$ python manage.py sqlmigrate blog 0001

Run django in command line mode to manipulate objects
$ python manage.py shell

In [1]: from blog.models import Post

In [2]: from django.contrib.auth.models import User

In [3]: User.objects.all()
Out[3]: <QuerySet [<User: yevhen>, <User: testuser>]>

In [4]: User.objects.first()
Out[4]: <User: yevhen>

In [5]: User.objects.filter(username='testuser')
Out[5]: <QuerySet [<User: testuser>]>

In [6]: User.objects.filter(username='testuser').first()
Out[6]: <User: testuser>

In [7]: user = User.objects.filter(username='testuser').first()

In [8]: user
Out[8]: <User: testuser>

In [9]: user.id
Out[9]: 2

In [10]: user.email
Out[10]: ''

In [11]: user.pk
Out[11]: 2

In [12]: user = User.objects.get(id=1)

In [13]: user
Out[13]: <User: yevhen>

In [14]: Post.objects.all()
Out[14]: <QuerySet []>

In [15]: post_1 = Post(title='Blog 1', content='First Post is here!', author=user)

In [16]: Post.objects.all()
Out[16]: <QuerySet []>

In [17]: post_1.save()

In [18]: Post.objects.all()
Out[18]: <QuerySet [<Post: Post object (1)>]>

In [19]: exit()

In [20]: post = Post.objects.first()

In [21]: post.content
Out[21]: 'First Post is here!'

In [22]: post.date_posted
Out[22]: datetime.datetime(2019, 4, 3, 7, 41, 53, 268974, tzinfo=<UTC>)

In [23]: post.author
Out[23]: <User: yevhen>

In [24]: post.author.email
Out[24]: 'yevhen.k@gmail.com'

In [25]: Post.objects.filter(author_id=1)
Out[25]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>]>

In [26]: Post.objects.filter(author_id=2)
Out[26]: <QuerySet []>

In [27]: Post.objects.filter(author_id=1)
Out[27]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>]>

In [28]: user.post_set
Out[28]: <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager at 0x1e142093908>

In [29]: user.post_set.all()
Out[29]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>]>

In [30]: user.post_set.create(title='Blog 3', content='Third Post Content')
Out[30]: <Post: Blog 3>

In [31]: Post.objects.all()
Out[31]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog 3>]>


To add custom model to admin page use admin.py file.

$ pip install django-crispy-forms

In settings add follows:
CRISPY_TEMPLATE_PACK = 'booststrap4'
INSTALLED_APPS = [...,'crispy_forms',...]


In [1]: from django.contrib.auth.models import User

In [2]: user = User.objects.filter(username='yevhen').first()

In [3]: user
Out[3]: <User: yevhen>

In [4]: user.profile
Out[4]: <Profile: yevhen Profile>

In [5]: user.profile.image
Out[5]: <ImageFieldFile: profile_pics/bio_team.png>

In [6]: user.profile.image.width
Out[6]: 720

In [7]: user.profile.image.height
Out[7]: 504

In [8]: user.profile.image.size
Out[8]: 25276

In [9]: user.profile.image.url
Out[9]: 'profile_pics/bio_team.png'

In [10]: test_user = User.objects.filter(username='testuser').first()

In [11]: test_user.profile
Out[11]: <Profile: testuser Profile>

In [12]: test_user.profile.image
Out[12]: <ImageFieldFile: default.jpg>

In [13]: test_user.profile.image.size
# ERROR!

In [14]: test_user.profile.image.url
Out[14]: 'default.jpg'


Add posts fron json file

In [1]: import json

In [2]: from blog.models import Post

In [3]: with open('posts.json') as f:
   ...:     posts_json = json.load(f)
   ...:

In [4]: for post in posts_json:
   ...:     post = Post(title=post['title'], content=post['content'], author_id=post['user_id'])
   ...:     post.save()
   ...:


   In [1]: from django.core.paginator import Paginator

In [2]: posts = ['1', '2', '3', '4', '5']

In [3]: p = Paginator(posts, 2)

In [4]: p.num_pages
Out[4]: 3

In [5]: for page in p.page_range:
   ...:     print(page)
   ...:
1
2
3

In [6]: p1 = p.page(1)

In [7]: p1
Out[7]: <Page 1 of 3>

In [8]: p1.number
Out[8]: 1

In [9]: p1.object_list
Out[9]: ['1', '2']

In [10]: p1.has_previous
Out[10]: <bound method Page.has_previous of <Page 1 of 3>>

In [11]: p1.has_next
Out[11]: <bound method Page.has_next of <Page 1 of 3>>

In [12]: p1.has_previous()
Out[12]: False

In [13]: p1.has_next()
Out[13]: True

In [14]: p1.next_page_number()
Out[14]: 2